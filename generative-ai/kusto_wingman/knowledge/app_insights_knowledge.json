[
    {
        "question": "The following query defines a custom Service Level Agreement (SLA): a request is considered as meeting SLA if it completes in under 3 seconds. The query then adds a static SLA target of 99.9% of requests needing to meet the SLA. The two are plotted on a time chart. ",
        "queryType": "appinsights",
        "query": "\nrequests\n| where timestamp > ago(7d)\n| summarize slaMet = count(duration < 3000), slaBreached = count(duration >= 3000), totalCount = count() by bin(timestamp, 1h)\n| extend SLAIndex = slaMet * 100.0 / totalCount \n| extend SLA = 99.9\n| project SLAIndex, timestamp, SLA \n| render timechart \n"
    },
    {
        "question": "This example finds which exceptions are related to failed requests in the past 24 hours.",
        "queryType": "appinsights",
        "query": "\nrequests \n | where timestamp > ago(24h) and success==\"False\"\n | join kind=inner (exceptions \n\t| where timestamp > ago(24h) ) on operation_Id \n | project type, method, requestName = name, requestDuration = duration\n"
    },
    {
        "question": "The following example calculates the 50th, 90th, and 95th percentiles of request duration, in the past 24 hours:",
        "queryType": "appinsights",
        "query": "\nrequests \n  | where timestamp > ago(24h) \n  | summarize percentiles(duration, 50, 90, 95) by bin(timestamp, 1h) \n  | render timechart\n"
    },
    {
        "question": "The following example counts the number of requests received from each country (aka \"traffic\") in the past 24 hours. Traffic distribution from the top 10 countries is displays in a pie-chart.",
        "queryType": "appinsights",
        "query": "\nrequests \n | where  timestamp > ago(24h) \n | summarize count() by client_CountryOrRegion\n | top 10 by count_ \n | render piechart\n"
    },
    {
        "question": "Get all trace where at least one Error trace present\n",
        "queryType": "appinsights",
        "query": "requests\n| where success == \"False\" and timestamp >= ago(7d) \n| join kind= inner traces on operation_Id  \n| project operation_Id , timestamp, message, severityLevel, appName \n| order  by timestamp, operation_Id\n"
    },
    {
        "question": "Get Error trace only\n",
        "queryType": "appinsights",
        "query": "requests\n| where success == \"False\" and timestamp >= ago(7d) \n| join kind= inner (\ntraces\n| where severityLevel == 3\n) on operation_Id  \n| project operation_Id , timestamp, message, severityLevel  \n| order  by timestamp, operation_Id\n"
    },
    {
        "question": "Get Error trace only (using timechart)\n",
        "queryType": "appinsights",
        "query": "requests\n| where success == \"False\" and timestamp >= ago(7d)\n| join kind= inner (\ntraces\n| where severityLevel == 3\n) on operation_Id  \n| summarize event_count=count() by bin(timestamp, 1h) \n| render timechart\n"
    },
    {
        "question": "Count all record in all tables\n",
        "queryType": "appinsights",
        "query": "union *\n| count \n"
    },
    {
        "question": "Count all record in particular tables\n",
        "queryType": "appinsights",
        "query": "requests\n| count\n"
    },
    {
        "question": "Filter by regex\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp >= ago(1d) \n| where operation_Name matches regex \".*Func\" \n| limit 10 \n| order by timestamp desc \n"
    },
    {
        "question": "Show me dependencies related to slow requests\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp > ago(1d)\n| where duration > 1000\n| limit 100\n| order by duration desc\n"
    },
    {
        "question": "Extract data from Json\n",
        "queryType": "appinsights",
        "query": "traces\n| where timestamp <= ago(1d) \n| where  message has \"header\"\n| extend jsonObj = parse_json(message) \n| project timestamp, messageTimestamp=jsonObj.messageTimestamp, message\n| limit 1000\n| order by timestamp desc \n"
    },
    {
        "question": "Extending with new calculated fields\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp > ago(1d)\n| extend responseBucket = iff(duration > 1000, \"Too long\", \"Ok\") \n| project name, duration , responseBucket \n"
    },
    {
        "question": "Aggregation\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp > ago(7d)\n| summarize slaMet=count(duration<2000),slaBreached=count(duration>=2000) by bin(timestamp, 1h)  \n| render timechart \n"
    },
    {
        "question": "Check service meeting SLA\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp > ago(7d)\n| summarize slaMet=count(duration<2000),slaBreached=count(duration>=2000), totalCount=count()  by bin(timestamp, 1h) \n| extend pctIndex = slaMet * 100.0/totalCount \n| project pctIndex ,timestamp\n| render timechart  \n"
    },
    {
        "question": "Percentiles\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp > ago(1d)\n| summarize percentiles(duration, 50, 95), reqCount100s=count()/100 by bin(timestamp, 1h)  \n| render timechart  \n"
    },
    {
        "question": "Analyzing latest failure\n",
        "queryType": "appinsights",
        "query": "requests\n| where timestamp >= ago(7d)\n| where success == \"False\" \n| summarize arg_max(timestamp, name, resultCode) by cloud_RoleInstance\n"
    },
    {
        "question": "Reduce by\n",
        "queryType": "appinsights",
        "query": "traces\n| where timestamp >= ago(7d)\n| summarize Count=count() by message\n| reduce by message \n"
    },
    {
        "question": "Distinct page view by session\n",
        "queryType": "appinsights",
        "query": "pageViews\n| where timestamp >= ago(7d)\n| summarize dcount(name) by session_Id  \n| order by session_Id\n"
    },
    {
        "question": "Top set of page people visited\n",
        "queryType": "appinsights",
        "query": "pageViews\n| where timestamp >= ago(7d)\n| order by timestamp desc\n| summarize pageVisited = makelist(name) by session_Id \n| top 10\n"
    },
    {
        "question": "what are the top 10 common page flows for my users\n",
        "queryType": "appinsights",
        "query": "pageViews\n| where timestamp >= ago(7d)\n| order by timestamp desc\n| summarize pageVisited = makelist(name) by session_Id \n| summarize count() by tostring(pageVisited)  \n| top 10 by count_ desc\n"
    },
    {
        "question": "SelfJoin, RegEx Filter and extract Json Data\n",
        "queryType": "appinsights",
        "query": "traces\n| where timestamp > ago(3d)\n| join kind= inner (\n   traces\n    | extend jsonObj = parse_json(message) \n    | where timestamp > ago(3d)\n    | where message matches regex \".*RAM01355\"\n    | limit 1\n) on operation_Id \n| order by timestamp asc \n"
    },
    {
        "question": "Search any data in any column by search keyword\n",
        "queryType": "appinsights",
        "query": "traces\n    | extend jsonObj = parse_json(message) \n    | where operation_Name == \"ApplicationName\" \n    | where timestamp > ago(30d)\n    | search \"2c2373f5-5adb-4552-9b44-f303770c4abc\"  \n    | limit 50\n    | order by timestamp asc \n"
    },
    {
        "question": "Counting the number of unique VM in 1 minute.\n",
        "queryType": "appinsights",
        "query": "let start = datetime(2019-01-25T00:00);\ncustomMetrics\n| where timestamp > start\n| where timestamp < start +1m\n| where name == \"Function1 Successes\" \n| summarize uniqueVMCount=dcount(cloud_RoleInstance)\n"
    },
    {
        "question": "Check work distrubution acroll VM\n",
        "queryType": "appinsights",
        "query": "let start = datetime(2019-01-25T00:00);\ncustomMetrics\n| where timestamp > start\n| where timestamp < start +1m\n| where name == \"Function1 Successes\" \n| summarize sum(value) by cloud_RoleInstance\n| render piechart \n"
    },
    {
        "question": "Check application metrics (Successes, Failures and Duration).\n",
        "queryType": "appinsights",
        "query": "let start = datetime(2019-01-30T00:00);\ncustomMetrics\n| where timestamp > start\n| where timestamp < start +1d\n| where name in (\"Func Successes\", \"Func Failures\" ,\"Func Duration\")\n| summarize sum(value) by name, timestamp\n| render timechart     \n"
    },
    {
        "question": "Query with IN clause or subquery\n",
        "queryType": "appinsights",
        "query": "let operationids = toscalar ( // convert single column to value\ntraces\n| where operation_Name == \"Function\" and message contains \"1560\" \n| summarize makeset(operation_Id));\ntraces\n| where operation_Id in (operationids)   \n"
    },
    {
        "question": "Get distinct records\n",
        "queryType": "appinsights",
        "query": "traces\n| where operation_Name == \"Function\" and message contains \"1560\" \n| distinct operation_Id  \n"
    },
    {
        "question": "Get Azure durable function trace logs from Application Insights\n",
        "queryType": "appinsights",
        "query": "traces\n| extend functionName = tostring(customDimensions[\"prop__functionName\"]) \n| extend instanceId = tostring(customDimensions[\"prop__instanceId\"]) \n| extend state = tostring(customDimensions[\"prop__state\"]) \n| extend isReplay = tobool(customDimensions[\"prop__isReplay\"]) \n| extend output = tostring(customDimensions[\"prop__output\"]) \n| extend functionType = tostring(customDimensions[\"prop__functionType\"]) \n| where isReplay != true\n| project timestamp, instanceId , functionName ,state, output , appName = cloud_RoleName , functionType \n| summarize arg_max(timestamp, *) by instanceId \n| order by timestamp desc nulls last \n"
    },
    {
        "question": "# #count #make-series #timechart #summarize\n\n\nThe following query calculates and charts the current (last day) and monthly average request duration.\n\n",
        "queryType": "appinsights",
        "query": "let response_last_month = toscalar(\n    requests\n    | where timestamp between(ago(7d) .. ago(1d))\n    | summarize value=avg(duration) \n);\nrequests\n| where timestamp >= ago(1d)\n| make-series avg_duration = avg(duration) default=0 on timestamp in range(ago(1d), now(), 15m) \n| extend monthly_avg = repeat(response_last_month, array_length(avg_duration))\n| render timechart\n"
    },
    {
        "question": "# #dcount #render #barchart\n<!-- article_id: 3107\u200e2017\u200f\u200e03827001 -->\n\nThe following query retrieves all customEvents recorded in the past 24 hours, and calculates their total count by name, and the number of distinct users (also by name).\nThe 10 names with the highest count are selected, and their calculated values (count and distict users) are displayed in a barchart:\n\n",
        "queryType": "appinsights",
        "query": "customEvents \n | where timestamp >= ago(24h)\n | summarize dcount(user_Id), count() by name\n | top 10 by count_ \n | render barchart\n"
    }
]